LAB EXERCISE 1: TOWER OF HANOI

Design a C program to solve the Tower of Hanoi. Compute the time complexity.

#include <stdio.h>
#include<time.h>

void towerOfHanoi (int n, char from_rod, char to_rod, char aux_rod)
{
	if (n == 1)
	{
		printf ("\n Move disk 1 from rod %c to rod %c", from_rod, to_rod);
		return;
	}
	towerOfHanoi (n-1, from_rod, aux_rod, to_rod);
   	printf ("\n Move disk %d from rod %c to rod %c", n, from_rod, to_rod);
	towerOfHanoi (n-1, aux_rod, to_rod, from_rod);
}

int main ()
{
	int n = 4;
	clock_t start=clock (); 
	towerOfHanoi (n, 'A','C', 'B');
 	clock_t end=clock();
	printf (“Start time is %lf\n”,(double)start); 
	printf (“End time is %lf\n”,(double)end); 
	printf (“Total time is %lf\n”,(double)(end-start));
	return 0;
}
*******************************************************
 2: BINARYSEARCH

Apply divide and conquer method and Design a C program to search an element in a given array and Compute the time complexity. 
Binary search - recursive method.

#include<stdio.h> 
#include<time.h>
void bsearch (int, int [], int, int ,int);
void bsearch (int key, int a [],int size, int low, int high)
{
	int mid = (low+high)/2;
	if (low < high)
	{
		if (a [mid] == key)
		{
			printf ("Element found at index %d and position %d\n", mid, mid+1); 
			return;
		}
		else if (key < a [mid])
		{
			high =mid-1;
 			bsearch (key, a, size, low, high);
		}
		else if (key > a [mid])
		{
			low =mid+1; 
			bsearch (key, a, size, low, high);
	}
	else
	{ 
		printf ("Element not found\n"); 
		return;
	}
}

int main()
{
	int size,key,low,high,mid; 
	printf("Enter size\n"); 
	scanf("%d",&size); 
	low=0,high=size-1;
	int a[size];
	printf("Enter array elements\n"); 
	for(int i=0;i<size;i++)
	{
		scanf("%d",&a[i]);
	}
	printf("Enter key\n"); 
	scanf("%d",&key); 
	clock_t start=clock();
	bsearch(key,a,size,low,high);
	clock_t end=clock();
	printf(“Start time is %lf\n”,(double)start); 
	printf(“End time is %lf\n”,(double)end); 
	printf(“Total time is %lf\n”,(double)(end-start));
	return 0;
}
******************************************************
 3: MERGESORT

Apply Divide and Conquer method Design a C program to sort an array using Merge sort algorithm and compute its time complexity. 

#include<stdio.h>
 #include<time.h>

void mergesort(int a[],int i,int j);
void merge(int a[],int i1,int j1,int i2,int j2);
int n=0;
int main()
{
	int a[30],i;
	printf("Enter no of elements:"); 
	scanf("%d",&n);
	printf("Enter array elements:");
	for(i=0;i<n;i++)
	scanf("%d",&a[i]); 
	clock_t start=clock(); 
	mergesort(a,0,n-1)
	clock_t end=clock();
	printf(“Start time is %lf\n”,(double)start); 
	printf(“End time is %lf\n”,(double)end); 
	printf(“Total time is %lf\n”,(double)(end-start));
	printf("\sorted array is :");
	for(i=0;i<n;i++)
		printf("%d ",a[i]);
	return 0;
}
void mergesort(int a[],int i,int j)
{
	int mid;

	if(i<j)
	{
		mid=(i+j)/2; 
		mergesort(a,i,mid); 
		mergesort(a,mid+1,j); 
		merge(a,i,mid,mid+1,j);
	}
} 
void merge(int a[],int i1,int j1,int i2,int j2)
{
	int temp[50]; int i,j,k; i=i1;
	j=i2; k=0;
	while(i<=j1 && j<=j2)
	{ 
		if(a[i]<a[j])
		temp[k++]=a[i++];
		else
		temp[k++]=a[j++];
	}
                 while(i<=j1)
		temp[k++]=a[i++];
	while(j<=j2)
		temp[k++]=a[j++]
	for(i=i1,j=0;i<=2;i++;j++)
	a[i]=temp[j];
	for(int s=i1;i<n;i++)
	{
		printf(“%d”,a[s]);
	}
	printf(“\n”);
}
********************************************	
 4:QUICKSORT

Apply Divide and Conquer method Design a C program to sort an array using Quick sort algorithm
and compute its time complexity.

#include<stdio.h> 
#include<time.h>
void quicksort(int a[],int low,int high);
 int partition(int a[],int low,int high); 
void swap(int*,int*);

void quicksort(int a[],int low,int high)
{
	if(low<high)
	{
		int pi = partition(a,low,high); 
		quicksort(a,low,pi-1); 
		quicksort(a,pi+1,high);
	}
}

void swap(int *a,int *b)
{
	int c=*a;
	*a=*b;
	*b=c;
}

int partition(int a[],int low,int high)
{

	int pivot=a[high]; 
	int i=low-1;
	for(int j=low;j<=high-1;j++)
	{
		if(a[j]<=pivot)
		{
			i++;
			swap(&a[i],&a[j]);
		}
	}
	swap(&a[i+1],&a[high]); return (i+1);
}

int main()
{
	int a[]={34,65,23,76,33};
	clock_t start=clock();
 	quicksort(a,0,4); 
	clock_t end=clock();
	printf(“Start time is %lf\n”,(double)start);
	 printf(“End time is %lf\n”,(double)end); 
	printf(“Total time is %lf\n”,(double)(end-start)); 
	for(int k=0;k<=4;k++)
	{
		printf("%d ",a[k]);
	}
	return 0;
}
***************************************************
 5:PRIMS AND KRUSKALS ALGORITHM

Apply Greedy method and Design a C program to find the minimum cost spanning tree using Prim’s
and Kruskal’s Algorithm and compute its complexity.

****PRIMS ALGORITHM*****
#include<stdio.h> 
#include<time.h>
int a,b,u,v,n,i,j,ne=1;

int visited[10]={0},min,mincost=0,cost[10][10];
 void main()
{
	printf("\nEnter the number of nodes:"); 
	scanf("%d",&n);
	printf("\nEnter the adjacency matrix:\n"); 
	for(i=1;i<=n;i++)
		for(j=1;j<=n;j++)
		{
			scanf("%d",&cost[i][j]);
 			if(cost[i][j]==0)
			cost[i][j]=999;
		}
		clock_t start=clock(); 
		visited[1]=1;
		printf("\n"); 
		while(ne < n)
		{
			for(i=1,min=999;i<=n;i++)
			{
				 for(j=1;j<=n;j++)
				 {
					 if(cost[i][j]< min && if(visited[i]!=0))
					{

						min=cost[i][j]; 
						a=u=i;
						b=v=j;

					}

					if(visited[u]==0 || visited[v]==0)
					{

						printf("\n Edge %d:(%d %d) cost:%d",ne++,a,b,min); 
						mincost+=min;
						visited[b]=1;

					}

					cost[a][b]=cost[b][a]=999;
				}
			}	


		}
clock_t end=clock();
printf(“Start time is %lf\n”,(double)start);
printf(“End time is %lf\n”,(double)end); 
printf(“Total time is %lf\n”,(double)(end-start));
printf("\n Minimun cost=%d",mincost);
}
(ANOTHER PROGRAM FOR PRIM'S ALGORITHM)
#include <stdio.h>
#include <limits.h>
 
#define V 5
 
int minKey(int key[], int mstSet[]) 
{
    int min = INT_MAX, min_index;
    int v;
    for (v = 0; v < V; v++)
    {
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;
     }
     return min_index;
}
 
int printMST(int parent[], int n, int graph[V][V])
{
   	 int i;
    	printf("Edge   Weight\n");
   	 for (i = 1; i < V; i++)
        	 	printf("%d - %d    %d \n", parent[i], i, graph[i][parent[i]]);
}
 
void primMST(int graph[V][V])
{
   	 int parent[V];		 // Array to store constructed MST
    	int key[V], i, v, count; 	// Key values used to pick minimum weight edge in cut
    	int mstSet[V]; 		// To represent set of vertices not yet included in MST
 
    	// Initialize all keys as INFINITE
   	 for (i = 0; i < V; i++)
        		key[i] = INT_MAX, mstSet[i] = 0;
 	// Always include first 1st vertex in MST.
    	key[0] = 0; 		// Make key 0 so that this vertex is picked as first vertex
   	parent[0] = -1; 		// First node is always root of MST
 	// The MST will have V vertices
	for (count = 0; count < V - 1; count++)
 	{
       		 int u = minKey(key, mstSet);
        		mstSet[u] = 1;
 		for (v = 0; v < V; v++)
		{
           			 if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
               				 parent[v] = u, key[v] = graph[u][v];
		}	
	}
 
   	 // print the constructed MST
   	 printMST(parent, V, graph);
}
 
int main() 
{
    /* Let us create the following graph
     2    3
    (0)--(1)--(2)
     |   / \   |
    6| 8/   \5 |7
     | /     \ |
    (3)-------(4)
     9          */
    int graph[V][V] = { { 0, 2, 0, 6, 0 }, { 2, 0, 3, 8, 5 },
            { 0, 3, 0, 0, 7 }, { 6, 8, 0, 0, 9 }, { 0, 5, 7, 9, 0 }};
   primMST(graph);
   return 0;
}

*****KRUSKAL'S ALGORITHM*****

#include<stdio.h> 
#include<time.h>
int i,j,k,a,b,u,v,n,ne=1;
int min,mincost=0,cost[9][9],parent[9]; 
int find(int);
int uni(int,int); 
void main()
{
	printf("\n\tImplementation of Kruskal's algorithm\n");
	printf("\nEnter the no. of vertices:"); 
	scanf("%d",&n);
	printf("\nEnter the cost adjacency matrix:\n"); 
	for(i=1;i<=n;i++)
	{
 
		for(j=1;j<=n;j++)
		{
			scanf("%d",&cost[i][j]);
			 if(cost[i][j]==0)
				cost[i][j]=999;
		}
	}
	printf("The edges of Minimum Cost Spanning Tree are\n"); clock_t start=clock();
	while(ne < n)
	{
		for(i=1,min=999;i<=n;i++)
		{
			for(j=1;j <= n;j++)
			{
				if(cost[i][j] < min)
				{
					min=cost[i][j];
					 a=u=i;
					b=v=j;
				}
			}
		}
		u=find(u); 
		v=find(v);
		 if(uni(u,v))
		{
			printf("%d edge (%d,%d) =%d\n",ne++,a,b,min); 
			mincost +=min;
		}
		cost[a][b]=cost[b][a]=999;
}
printf("\n\tMinimum cost = %d\n",mincost);
clock_t end=clock();
printf(“Start time is %lf\n”,(double)start); 
printf(“End time is %lf\n”,(double)end); 
printf(“Total time is %lf\n”,(double)(end-start));
}
int find(int i)
{
	while(parent[i])
		 i=parent[i]; 
	return i;
}
int uni(int i,int j)
{
	if(i!=j)
	{
		parent[j]=i; 
		return 1;
	}
	return 0;
}
******************************************
 6 FLOYD'S-WARSHALL ALGORITHM

Apply Dynamic Programming Technique and Design a C program to find the all pairs shortest path
using Floyd-Warshall Algorithm and computes its complexity.

#include<stdio.h>
int min(int,int);
void floyds(int p[10][10],int n)
{
 	int i,j,k;
 	for(k=1;k<=n;k++)
	{
		for(i=1;i<=n;i++)
		{
			for(j=1;j<=n;j++)
			{
				if(i==j)
					p[i][j]=0;
				else
    					 p[i][j]=min(p[i][j],p[i][k]+p[k][j]);
			}
		}
	}
}
int min(int a,int b)
{
	 if(a<b)
  		return(a);
 	else
 		 return(b);
}
void main()
{
 		int p[10][10],w,n,e,u,v,i,j;;
		printf("\n Enter the number of vertices:");
 		scanf("%d",&n);
 		printf("\n Enter the number of edges:\n");
 		scanf("%d",&e);
		for(i=1;i<=n;i++)
 		{
  			for(j=1;j<=n;j++)
  				 p[i][j]=999;
		 }
 		for(i=1;i<=e;i++)
 		{
 			 printf("\n Enter the end vertices of edge%d with its weight \n",i);
  			scanf("%d%d%d",&u,&v,&w);
 			 p[u][v]=w;
 		}
 		printf("\n Matrix of input data:\n");
 		for(i=1;i<=n;i++)
 		{
 			 for(j=1;j<=n;j++)
   				printf("%d \t",p[i][j]);
 			 printf("\n");
 		}
		 floyds(p,n);
		 printf("\n Transitive closure:\n");
 		for(i=1;i<=n;i++)
		 {
  			for(j=1;j<=n;j++)
   			printf("%d \t",p[i][j]);
 			 printf("\n");
		 }
		 printf("\n The shortest paths are:\n");
		 for(i=1;i<=n;i++)
 		 for(j=1;j<=n;j++)
  		{
  			 if(i!=j)
   			 printf("\n <%d,%d>=%d",i,j,p[i][j]);
		  }
}
***********************************************
 7:  0-1 KNAPSACK

Design a C program to find the optimal solution of 0-1 knapsack problem using dynamic
programming and Compute the time complexity.

#include<stdio.h>
#include<time.h>
int max(int a, int b) 
{ 
	return (a > b)? a : b;
 } 
int knapSack(int W, int wt[], int val[], int n)
{
	int i, w;
	int K[n+1][W+1];
	for (i = 0; i <= n; i++)
	{
 		for (w = 0; w <= W; w++)
		{
 			if (i==0 || w==0) 
				K[i][w] = 0;
			else if (wt[i-1] <= w)
				K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w);
 
			else
				K[i][w] = K[i-1][w];

		}
	}
 	return K[n][W];
}
int main()
{
	int i, n, val[20], wt[20], W;
	printf("Enter number of items:"); 
	scanf("%d", &n);
	printf("Enter value and weight of items:\n");
	for(i = 0;i < n; ++i)
	{
		scanf("%d%d", &val[i], &wt[i]);
	}
	printf("Enter size of knapsack:");
	scanf("%d", &W);
	clock_t start=clock();
	printf("%d", knapSack(W, wt, val, n)); 
	clock_t end=clock();
	printf(“Start time is %lf\n”,(double)start); 
	printf(“End time is %lf\n”,(double)end);
	printf(“Total time is %lf\n”,(double)(end-start)); 
	return 0;
}
**************************************************
 8: TRAVELLING SALESMAN PROBLEM

Design a C program to solve the Travelling Salesman Problem using dynamic programming and
compute its time complexity.

#include<stdio.h> 
#include<time.h>
int ary[10][10],completed[10],n,cost=0;

void takeInput()
{
	int i,j;
	printf("Enter the number of villages: "); 
	scanf("%d",&n);
 	printf("\nEnter the Cost Matrix\n");
	for(i=0;i < n;i++)
	{
		printf("\nEnter Elements of Row: %d\n",i+1);
			for( j=0;j < n;j++)
			 scanf("%d",&ary[i][j]);
			completed[i]=0;
	}
	printf("\n\nThe cost list is:"); 
	for( i=0;i < n;i++)
	{
		printf("\n");
		for(j=0;j < n;j++) 
		printf("\t%d",ary[i][j]);
	}
}

void mincost(int city)
{
		int i,ncity;
		completed[city]=1;
		printf("%d--->",city+1); 
		ncity=least(city);
		if(ncity==999)
		{
			ncity=0; 
			printf("%d",ncity+1); 
			cost+=ary[city][ncity];
			return;
		}
		mincost(ncity);
}

int least(int c)
{
	int i,nc=999;
	int min=999,kmin;
	for(i=0;i < n;i++)
	{
		if((ary[c][i]!=0)&&(completed[i]==0))
			if(ary[c][i]+ary[i][c] < min)
			{
				min=ary[i][0]+ary[c][i];
				kmin=ary[c][i]; nc=i;
			}
	}

 	if(min!=999) cost+=kmin;
	return nc;
}

int main()
{
	takeInput();
  	printf("\n\nThe Path is:\n"); 
	clock_t start=clock(); 
	mincost(0);
	clock_t end=clock();
	printf(“Start time is %lf\n”,(double)start); 
	printf(“End time is %lf\n”,(double)end); 
	printf(“Total time is %lf\n”,(double)(end-start));
	printf("\n\nMinimum cost is %d\n ",cost);
	return 0;
}
LAB EXCERCISE 9: LONGEST COMMON SUBSEQUENCE
